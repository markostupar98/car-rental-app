// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String      @id @default(cuid())
  email     String   @unique
  name      String?
  emailVerified DateTime?
  image     String?
  password  String?
  role      Role @default(USER)
  queries   Query[]
  accounts  Account[]
}

model Company {
  id        String      @id @default(cuid())
  name       String
  cars       Car[]
  queries    Query[]
}

model Car {
  id        String      @id @default(cuid())
  model      String
  brand      String
  year       Int
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  queries    Query[]
}

model Query {
  id        String      @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  carId      String
  car        Car      @relation(fields: [carId], references: [id])
  startDate  DateTime
  endDate    DateTime
}